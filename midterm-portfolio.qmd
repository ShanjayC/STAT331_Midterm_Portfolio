---
title: "Midterm Portfolio"
author: "Shanjay Chandraprakasam"
date: "2025-10-26"
format:
  html:
    embed-resources: true
    code-tools: true
    code-fold: true
    code-summary: "Show/Hide Code"
execute:
  echo: true
  warning: false
  message: false
editor: source
---

```{r}
#| label: packages-and-data
#| message: false
#| warning: false
library(tidyverse)
library(forcats)
library(dplyr)
library(here)
library(scales)

childcare_costs <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv')

counties <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')

tax_rev <- read_csv('https://atheobold.github.io/groupworthy-data-science/labs/instructions/data/ca_tax_revenue.csv')
```
Exhibit A — Data Join and Filtering

(Learning Targets: WD-5, R-3, PE-1)
Source: Challenge 4 Revised — Childcare Costs in California, Question 2: “Join County and Childcare Data”

```{r}
#| label: ca-childcare-costs
ca_childcare <- counties %>%
filter(state_name == "California") %>%
select(county_fips_code, county_name, state_name) %>%
left_join(childcare_costs, by = "county_fips_code") %>%
arrange(county_name, study_year)

ca_childcare <- ca_childcare %>%
left_join(
tax_rev,
by = c("county_name" = "entity_name",
"study_year"  = "year")
)
```

Reflection:
Initially, I had placed the filter(state_name == "California") function after the join and kept getting missing data. After revising, I realized that filtering before the join is cleaner and prevents “object not found” errors. I also learned to join keys explicitly (county_name → entity_name, study_year → year), which made my code more robust and readable.

Exhibit B — Creating Census Regions

(Learning Targets: WD-4, R-2, PE-4)

Source: Challenge 4 Revised — Childcare Costs in California, Question 4: “Create California Region Variable Using fct_collapse()”

```{r}
#| label: recoding-county-to-census-regions
ca_childcare <- ca_childcare %>%
mutate(county_name = str_remove(county_name, " County$")) %>%
mutate(region = fct_collapse(
factor(county_name),
"Superior California"    = c("Butte","Colusa","El Dorado","Glenn",
"Lassen","Modoc","Nevada","Placer","Plumas",
"Sacramento","Shasta","Sierra","Siskiyou",
"Sutter","Tehama","Yolo","Yuba"),
"North Coast"            = c("Del Norte","Humboldt","Lake","Mendocino",
"Napa","Sonoma","Trinity"),
"San Francisco Bay Area" = c("Alameda","Contra Costa","Marin",
"San Francisco","San Mateo","Santa Clara",
"Solano"),
"Northern San Joaquin"   = c("Alpine","Amador","Calaveras","Madera",
"Mariposa","Merced","Mono","San Joaquin",
"Stanislaus","Tuolumne"),
"Central Coast"          = c("Monterey","San Benito","San Luis Obispo",
"Santa Barbara","Santa Cruz","Ventura"),
"Southern San Joaquin"   = c("Fresno","Inyo","Kern","Kings","Tulare"),
"Inland Empire"          = c("Riverside","San Bernardino"),
"Los Angeles"            = "Los Angeles",
"Orange County"          = "Orange",
"San Diego–Imperial"     = c("Imperial","San Diego")
))
```

Reflection:
Originally, I put both mutate() calls together in one long sequence, which made the code hard to read. By separating them into two clear steps, readability improved and the code now fits tidy-style guidelines.

Exhibit C — Income by Region Over Time

(Learning Targets: WD-7, DVS-6, R-2)
Source: Challenge 4 Revised — Childcare Costs in California, Question 5: “Summarize Median Income by Region and Year”

```{r}
#| label: median-income-by-region-over-time
income_table <- ca_childcare %>%
filter(study_year %in% c(2008, 2018)) %>%
group_by(region, study_year) %>%
summarize(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = study_year, values_from = median_income) %>%
rename(
`Median Income 2008 (2018 USD)` = `2008`,
`Median Income 2018 (2018 USD)` = `2018`
) %>%
arrange(desc(`Median Income 2018 (2018 USD)`))

income_table
```

Reflection:
I learned how to use the pivot_wider() function to convert a long summary into a clear comparison table. By renaming the columns, the table became immediately more understandable to the reader, improving clarity and readability.

Exhibit D — Infant Care Costs vs Income

(Learning Targets: DVS-1, DVS-2, DSSM-2)

Source: Challenge 4 Revised — Childcare Costs in California, Question 9: “Visualize and Model Relationship Between Income and Infant Childcare Cost”
```{r}
#| label: scatterplot-income-vs-childcare
infant_center <- ca_childcare %>% filter(!is.na(mhi_2018), !is.na(mc_infant))

ggplot(infant_center, aes(x = mhi_2018, y = mc_infant)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "#0072B2") +
scale_x_continuous(labels = label_dollar()) +
scale_y_continuous(labels = label_dollar()) +
labs(
x = "Median Household Income (2018 USD)",
y = "Median Weekly Infant Price (Center-Based, USD)",
title = "Relationship Between Income and Infant Childcare Cost"
) +
theme_minimal(base_size = 13)

reg_mod1 <- lm(mc_infant ~ mhi_2018, data = infant_center)
summary(reg_mod1)
```
Reflection:
Initially, I completely ignored axis formatting. Revising with label_dollar() made the plot look much more professional. The lm model expressed a strong positive slope with t = 33.26 and p < 2e-16, confirming that higher-income areas have higher childcare costs.

Exhibit E — Regional Trends in Childcare Costs

(Learning Targets: WD-7, DVS-3, PE-4)
Source: Challenge 4 Revised — Childcare Costs in California, Question 7: “Compare Trends in Childcare Prices Across Regions and Age Groups”
```{r}
#| label: recreate-plot
region_levels <- c(
"San Francisco Bay Area","Orange County","Los Angeles",
"Northern San Joaquin","Central Coast","Inland Empire",
"Superior California","Southern San Joaquin",
"San Diego–Imperial","North Coast"
)

plot_data <- ca_childcare %>%
select(study_year, region, mc_infant, mc_toddler, mc_preschool) %>%
pivot_longer(
c(mc_infant, mc_toddler, mc_preschool),
names_to = "age_group", values_to = "weekly_price"
) %>%
mutate(
age_group = recode(age_group,
mc_infant = "Infant",
mc_toddler = "Toddler",
mc_preschool = "Preschool"),
age_group = fct_relevel(age_group, "Infant","Toddler","Preschool"),
region = factor(region, levels = region_levels)
)

ggplot(plot_data, aes(x = study_year, y = weekly_price, color = region)) +
geom_point(alpha = 0.4, size = 1.6) +
geom_smooth(method = "loess", se = TRUE) +
facet_wrap(~ age_group, nrow = 1) +
scale_color_brewer(palette = "Set3",
limits = region_levels, drop = FALSE) +
scale_x_continuous(breaks = seq(2008, 2018, 2)) +
labs(
title = "Weekly Median Price for Center-Based Childcare ($)",
x = "Year",
y = "Median Weekly Price ($)",
color = "California Region"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "right")
```
Reflection:
Initially, my facets were unordered and the colors inconsistent across the plots. By defining region_levels and using scale_color_brewer(), I made the plot more readable and color-blind-friendly, consistent with the course style.

Exhibit F — Overall Statewide Trends (Challenge 4 Summary)

(Learning Targets: DSSM-2, DVS-6, R-2)?
Source: Challenge 4 Revised — Childcare Costs in California, Question 11: “Calculate and Visualize Statewide Median Prices for Center vs Family Care”
```{r}
#| label: statewide-trends
state_medians <- ca_childcare %>%
group_by(study_year) %>%
summarize(
center_infant = median(mc_infant, na.rm = TRUE),
family_infant = median(mfcc_infant, na.rm = TRUE),
.groups = "drop"
)

plot_data <- state_medians %>%
pivot_longer(c(center_infant, family_infant),
names_to = "setting",
values_to = "weekly_price") %>%
mutate(Setting = recode(setting,
center_infant = "Center (Infant)",
family_infant = "Family (Infant)"))

ggplot(plot_data, aes(study_year, weekly_price, color = Setting)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(2008, 2018, 2)) +
scale_color_manual(values = c("#1F77B4", "#FF7F0E")) +
labs(
title = "California Statewide Median Weekly Infant Childcare Price",
subtitle = "Centers vs Family (2008–2018)",
x = "Year",
y = "Weekly Price (USD)",
color = "Provider Type"
) +
theme_minimal()
```
Reflection:
The final plot demonstrates that center-based care has been consistently more expensive than family care, and that the gap widened through 2018. The code uses tidy pipes, explicit grouping, and clear labels to make it more readable and reproducible.
Learning Targets Summary
| Category                 | Targets Met   | Evidence (Exhibit) |
| ------------------------ | ------------- | ------------------ |
| Working with Data        | WD-1 – WD-7   | A, B, C            |
| Reproducibility          | R-1 – R-3     | A – F              |
| Data Viz & Summarization | DVS-1 – DVS-6 | C, D, E, F         |
| Program Efficiency       | PE-1, PE-4    | A, B, E            |
| Data Sim & Stat Models   | DSSM-2        | D, F               |

Midterm Reflection:
At the beginning of the course, I frankly struggled to understand some of the programming concepts. I am fairly new to RStudio and was extremely confused about the submission requirements. I wrongly assumed the revisions were simply for getting additional feedback, and out of apathy and a stressful personal life, I decided not to submit many of them, missing out on a crucial way to grow in this class. I greatly apologize for this mistake and the others I have made. I promise to continue improving based on them.
Throughout the last six weeks, I feel that I have greatly improved at making R code that is more reproducible and easier to read. I used to primarily focus on just getting the code to run, but now I think about why each step is structured a certain way, such as filtering before joins, naming variables clearly, and creating pivoted functions to reshape data effectively. I have also learned that clarity and communication in my code are imperative. Code needs to be as readable as possible, and I feel that I have demonstrated that throughout my work.
Overall, I feel very confident going into the next period of this class, and I hope this portfolio shows that clearly.


## Learning Targets Summary
| Category                 | Targets Met   | Evidence (Exhibit) |
| ------------------------ | ------------- | ------------------ |
| Working with Data        | WD-1 – WD-7   | A, B, C            |
| Reproducibility          | R-1 – R-3     | A – F              |
| Data Viz & Summarization | DVS-1 – DVS-6 | C, D, E, F         |
| Program Efficiency       | PE-1, PE-4    | A, B, E            |
| Data Sim & Stat Models   | DSSM-2        | D, F               |


Revising my thinking
At the beginning of the course, I struggled immensely with trying to conceptualize the different concepts in order, and with the accompanying confusion about submission requirements, it seems that I learned some things backwards. I learned to filter before joining, use explicit join keys, and realized I didn’t have clear column names. But over time, I learned the proper ordering of things, renamed columns for clarity, reordered facets and legends to match color encoding, and formatted axes with proper labels such as currency. These revisions made my work much clearer and also much more reproducible for posterity.

Extending my thinking
On some of my assignments, I went above and beyond the minimal plots by adding linear models to quantify relationships, selecting color-blind-friendly palettes, and releveling factors to have more consistency in facet order. I also used loess smoothing to communicate trends across regions.

Grade justification
Based on the syllabus expectations and the artifacts provided:
- Learning targets: Evidence for WD-1…WD-7, R-1…R-3, DVS-1…DVS-6, PE-1 & PE-4, and DSSM-2 is included with sources.
- Revision: I documented concrete improvements that fixed errors and improved clarity.
- Extension: I applied additional techniques (regression, factor ordering, accessible palettes).
- Collaboration: I contributed and incorporated peer feedback.

Requested grade: B (Good achievement), supported by the evidence above.